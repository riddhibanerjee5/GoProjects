// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: details/details.proto

package details

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetailGetterClient is the client API for DetailGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailGetterClient interface {
	GetDetails(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStreamDetails(ctx context.Context, opts ...grpc.CallOption) (DetailGetter_GetStreamDetailsClient, error)
}

type detailGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailGetterClient(cc grpc.ClientConnInterface) DetailGetterClient {
	return &detailGetterClient{cc}
}

func (c *detailGetterClient) GetDetails(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/details.DetailGetter/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailGetterClient) GetStreamDetails(ctx context.Context, opts ...grpc.CallOption) (DetailGetter_GetStreamDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DetailGetter_ServiceDesc.Streams[0], "/details.DetailGetter/GetStreamDetails", opts...)
	if err != nil {
		return nil, err
	}
	x := &detailGetterGetStreamDetailsClient{stream}
	return x, nil
}

type DetailGetter_GetStreamDetailsClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type detailGetterGetStreamDetailsClient struct {
	grpc.ClientStream
}

func (x *detailGetterGetStreamDetailsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *detailGetterGetStreamDetailsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DetailGetterServer is the server API for DetailGetter service.
// All implementations must embed UnimplementedDetailGetterServer
// for forward compatibility
type DetailGetterServer interface {
	GetDetails(context.Context, *Request) (*Response, error)
	GetStreamDetails(DetailGetter_GetStreamDetailsServer) error
	mustEmbedUnimplementedDetailGetterServer()
}

// UnimplementedDetailGetterServer must be embedded to have forward compatible implementations.
type UnimplementedDetailGetterServer struct {
}

func (UnimplementedDetailGetterServer) GetDetails(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedDetailGetterServer) GetStreamDetails(DetailGetter_GetStreamDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamDetails not implemented")
}
func (UnimplementedDetailGetterServer) mustEmbedUnimplementedDetailGetterServer() {}

// UnsafeDetailGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailGetterServer will
// result in compilation errors.
type UnsafeDetailGetterServer interface {
	mustEmbedUnimplementedDetailGetterServer()
}

func RegisterDetailGetterServer(s grpc.ServiceRegistrar, srv DetailGetterServer) {
	s.RegisterService(&DetailGetter_ServiceDesc, srv)
}

func _DetailGetter_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailGetterServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/details.DetailGetter/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailGetterServer).GetDetails(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailGetter_GetStreamDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DetailGetterServer).GetStreamDetails(&detailGetterGetStreamDetailsServer{stream})
}

type DetailGetter_GetStreamDetailsServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type detailGetterGetStreamDetailsServer struct {
	grpc.ServerStream
}

func (x *detailGetterGetStreamDetailsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *detailGetterGetStreamDetailsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DetailGetter_ServiceDesc is the grpc.ServiceDesc for DetailGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetailGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "details.DetailGetter",
	HandlerType: (*DetailGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetails",
			Handler:    _DetailGetter_GetDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamDetails",
			Handler:       _DetailGetter_GetStreamDetails_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "details/details.proto",
}
